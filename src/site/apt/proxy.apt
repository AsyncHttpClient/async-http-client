                                    ------
                           Async Http Client - Configuring a Proxy
                                    ------
                              Jeanfrancois Arcand
                                    ------
                                       2012

Configuring a Proxy

  The AsyncHttpClient library supports proxy, proxy authentication and proxy tunneling.
  Just need to create a <<<ProxyServer>>> instance:

+-----+
AsyncHttpClient client = new AsyncHttpClient();
Future<Response> f = client.prepareGet("http://....)
                           .setProxyServer(new ProxyServer("127.0.0.1", 8080))
                           .execute();
+-----+

  If you need to use an SSL tunnel, all you need to do is:

+-----+
ProxyServer ps = new ProxyServer(ProxyServer.Protocol.HTTPS, "127.0.0.1", 8080);
AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
RequestBuilder rb = new RequestBuilder("GET")
                                .setProxyServer(ps)
                                .setUrl("https://twitpic.com:443");
Future responseFuture = asyncHttpClient.executeRequest(rb.build(), new AsyncCompletionHandlerBase() {
    @Override
    public void onThrowable(Throwable t) {}

    @Override
    public Response onCompleted(Response response) throws Exception {
        return response;
    }

});
Response r = responseFuture.get();
+-----+

  You can also set the authentication token on the <<<ProxyServer>>> instance:

+-----+
ProxyServer ps = new ProxyServer(ProxyServer.Protocol.HTTPS, "127.0.0.1", 8080, "admin", "password");
AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
RequestBuilder rb = new RequestBuilder("GET")
                            .setProxyServer(ps)
                            .setUrl("https://twitpic.com:443");
Future responseFuture = asyncHttpClient.executeRequest(rb.build(), new AsyncCompletionHandlerBase() {
    @Override
    public void onThrowable(Throwable t) {}

    @Override
    public Response onCompleted(Response response) throws Exception {
        return response;
    }

});
Response r = responseFuture.get();
+-----+

  You can also set the <<<ProxyServer>>> at the <<<AsyncHttpClientConfig>>> level. In that case, all request will share
  the same proxy information.

Using Java System Properties

  The AsyncHttpClient library supports the standard
  {{{http://docs.oracle.com/javase/7/docs/api/java/net/doc-files/net-properties.html#Proxies}Java Proxy System Properties}}.
  You can configure this at a global level using the <<<setUseProxyProperties(true)>>> method on the
  <<<AsyncHttpClientConfig.Builder>>>, or by setting the <<<com.ning.http.client.AsyncHttpClientConfig.useProxyProperties>>>
  system property to true.

Using JDK ProxySelectors

  The AsyncHttpClient library also supports using the default
  {{{http://docs.oracle.com/javase/7/docs/api/java/net/ProxySelector.html}JDK ProxySelector}}.  This allows for more
  fine grained control over which proxies to use, for example, it can be used in combination with
  {{{https://code.google.com/p/proxy-vole/}Proxy Vole}} to use OS configured proxies or to use a proxy.pac file.

  You configure this at a global level using the <<<setUseProxySelector(true)>>> method on the
  <<<AsyncHttpClientConfig.Builder>>>, or by setting the
   <<<com.ning.http.client.AsyncHttpClientConfig.useProxySelector>>> system property to true.

  If you don't change the default JDK <<<ProxySelector>>>, this setting is very similar to the <<<useProxyProperties>>>
  setting, though the <<<useProxyProperties>>> setting does allow more flexibility, such as the ability to use an
  HTTPS proxy.
